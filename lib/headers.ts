function composeOrigin(protocol: string | null, host: string | null) {
  if (protocol && host) {
    return `${protocol}://${host}`;
  }
  return null;
}

function parseCachedOrigin(headers: Headers) {
  /**
   * @see Doc [Origin header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin)
   */
  const autoGeneratedOrigin = headers.get('origin');
  const manuallyGeneratedOrigin = headers.get('x-origin');
  return autoGeneratedOrigin ?? manuallyGeneratedOrigin;
}

function parseOrigin(headers: Headers) {
  /**
   * @see Doc [X-Fowarded-Proto header](https://developer.mozilla.org/ko/docs/Web/HTTP/Headers/X-Forwarded-Proto)
   */
  const protocol =
    headers.get('x-forwarded-proto') ??
    headers.get('host')?.includes('localhost')
      ? 'http'
      : 'https';
  const host = headers.get('host'); // 'host' includes port
  // const pathname = headers.get('next-url');
  const origin = composeOrigin(protocol, host);
  return origin;
}

function parseHeader(headers: Headers) {
  const cachedOrigin = parseCachedOrigin(headers);
  const origin = parseOrigin(headers);
  console.log({ cachedOrigin, origin });
  return { origin: cachedOrigin ?? origin };
}

export { parseHeader };
